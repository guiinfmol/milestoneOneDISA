select coursename, grade from (courseoffers co natural join courseregistrations cr natural join studentregistrationstodegrees srtd) inner join courses c on co.courseid = c.courseid where studentid = %1% and srtd.degreeid = %2% AND grade >= 5 ORDER BY year, quartile, courseofferid;
select studentid from PassedCreditsPerRegistration pcpr NATURAL JOIN STUDENTregistrationstodegrees where passedCredits  >= (select totalECTS from degrees natural join studentregistrationstodegrees where StudentRegistrationId = pcpr.StudentRegistrationId) AND (SELECT COUNT(*) FROM courseregistrations where grade < 5 and pcpr.studentregistrationid = studentregistrationid) < 1 AND (avgMark) > %1% ORDER BY studentid;
select degreeid, 1.0*sum(case when gender='F' THEN 1 ELSE 0 END)/count(*)) as percentage from students s natural join studentregistrationstodegrees where EXISTS (select * from ActiveStudents where studentid = s.studentid) GROUP BY degreeid ORDER BY degreeid;
select cast((1.0*sum(case when gender='F' THEN 1 ELSE 0 END)/count(*))*100 as decimal(10,2)) as percentage from studentregistrationstodegrees natural join students natural join degrees where dept = %1%;
select 0;
select 0;
SELECT degreeid, birthyearstudent, gender, 1.0*sum(ects*grade)/sum(ects) as avgGrade FROM students natural join studentregistrationstodegrees natural join courseregistrations natural join courseoffers natural join courses GROUP BY CUBE(degreeid, birthyearstudent, gender) ORDER BY degreeid, birthyearstudent, gender;
select coursename, year, quartile from ((select courseofferid, count(*) as numstudents from courseregistrations group by courseofferid) as foo natural join (select courseofferid, count(*) as numassistants from studentassistants group by courseofferid) as foo2) natural join courseoffers natural join courses where foo.numstudents > 50 * foo2.numassistants;
